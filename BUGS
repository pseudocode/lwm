2018-12-08 (pn) Done a bit of clean-up in here. I've also set up a bunch of
sections, generally from most to least important. At the top we have crashes,
and at the bottom clean-ups.

Right at the bottom of the file there's a cheat sheet of debugging tools.


=== CRASHES ===


=== FUNCTIONAL BREAKAGES ===

I believe LWM isn't properly extracting struts on start-up; several times I've
had to pkill -HUP menu, after which its struts reappear. Not sure precisely why.


=== THINGS THAT LOOK SILLY ===


=== ERROR LOGS ===

LWM may still produce errors at certain times. These should be tracked down and
fixed. I've recently fixed a bunch, though.


=== FEATURES ===

Detect when mouse pointer switches between displays (for multiple xrandr
monitors) and bring up some visual indication of where the pointer has gone.

Make the size of the mouse pointer configurable. Some people have poor vision,
and would benefit from a larger pointer (and 4k displays exacerbate this).

Maybe implement keyboard control? Grabbing the 'Menu' key, for example, might be
a reasonable thing to do (although probably best to specify the key to grab as
an Xresource, and let the user define it). This could be used to open the unhide
menu where the mouse is, warp the pointer to the middle of the menu item which
currently has focus, and then (as the pointer is over the menu) take control of
the arrow keys to navigate up and down the menu, using pointer-warping. Hitting
Return would do the normal unhide action on the selected window, and warp the
pointer to its middle.


=== CLEANUPS ===

The work on xlib.h and xlib.cc has helped a lot, but this could be extended
such that:
1: All xlib access goes through this shim layer.
2: The shim layer becomes an interface with a concrete implementation.
3: We can then add a test implementation, and then proper unit testing.

We still have too many globals and static variables. These should be moved into
classes.

The Client class is getting better, but it's still a mess of public-access
instance variables. This needs further tightening up.

The interfaces between components aren't well-defined; they're on the way to
sanity, but the process of migrating the original C code to some kind of modern
structure is still very much in progress.


=== DEBUGGING TOOLS ===

To get a dump of the window tree:
xwininfo -root -tree

To print details about a window:
xprop -id <id>

Test LWM changes in Xephyr. Believe me, testing LWM in the same X session as
you're using to edit its code is a seriously painful experience.
Xephyr :2 -screen 2000x1400 &

In this directory there's a file called 'xdbg.cc', which can be compiled and
run. It shows a window which displays the mouse coordinates, and its last
configure request coordinates. Also, if you press and hold the shift key, it
will measure the mouse coordinates from when you press down shift until when you
release it, and on release also prints the start, end and distance to stdout.
This is very useful for comparing coordinates, and checking window positioning.


UNIT TESTS
~~~~~~~~~~
LWM has built-in unit tests. Welcome to modernity! They're all in 'tests.cc',
and are built into the main LWM binary. To run:
 ./lwm -test

I know building tests directly into the main binary isn't best practice, but
making LWM properly unit-testable would involve splitting up lwm.h and the
inevitable refactoring that'd require, plus bashing my head against Makefile.
Neither of these is appealing right now. The size of the unit test module is
not going to incur a serious drain on memory.

After all, we already have a built-in debug CLI; why not add a test suite? :-)


=== MY FAVOURITE DEBUGGING ENVIRONMENT ===

# Three terminals. In one, I do:
Xephyr :2 -screen 2000x1400 &
xsetroot -solid Grey

cd $HOME/dev/lwm
DISPLAY=:2 ./lwm -debugcli="xrandr 800x1200+0+0 800x500+800+0;dbg auto" 2>$HOME/stderr

# Second terminal:
tail -f $HOME/stderr

# Third terminal, used for rebuilding LWM:
cd $HOME/dev/lwm
make -j20
# Or, if I'm feeling really experimental, I might do:
while sleep 1; do make -j20; done
# ...which auto-rebuilds LWM every time I save a file.


DEBUG CLI
~~~~~~~~~
LWM can be run with the -debugcli command to have it listen for commands on
stdin. It doesn't have advanced editing functions, it's just a plain stdin
pipe which reads a line at a time. If you want editing functions, edit the lines
you want to paste in an editor.

It is recommended to redirect stderr into a file, and 'tail -f' it in a separate
terminal from the one in which the debug CLI is running. That way, your
interaction with the embedded debugger doesn't interfere with the debug logs,
and vice versa.

If -debugcli is specified with an argument, the argument is a sequence of
commands to run at start-up. This can be useful if you repeatedly want to set
auto-debug of new clients, or some other stuff.

For example, to print help on start-up, run:
./lwm -debugcli=help

To start up with xrandr faking on, and with an inaccessible area on the bottom-
right of the screen, and auto-debug of new clients, and with stderr going to a
file called 'stderr' in your home dir:
./lwm -debugcli="xrandr 800x1200+0+0 800x500+800+0;dbg auto" 2>$HOME/stderr

In another terminal, do:
tail -f $HOME/stderr

This keeps stdout/stderr separate (so interactions with the debug cli separate
from debugging output).

Available commands are:

help   - print out help.
ls     - lists the active clients.
dbg    - control over per-client debug messages (type 'dbg help' for details).
xrandr - test xrandr handling without fiddling with cables.

TODO: move the following xrandr help into the debug code.
TODO: refactor the debug handlers so there's a nice simple structure, and the
      help handling has a bit more structure.

xrandr (test xrandr handling without fiddling with cables)
~~~~~~
xrandr ?                         Print current visible areas.
xrandr                           Set visible area to be the full screen.
xrandr 100x200+0+0 100x50+100+0  Set visible areas.
